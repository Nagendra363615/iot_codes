#include <WiFi.h>
#include <WebServer.h>

// Wi-Fi credentials
const char* ssid = "ESP32-AP";
const char* password = "12345678";

// Use the built-in LED pin (GPIO 2 on most ESP32 boards)
const int ledPin = 2;

// Create a web server on port 80
WebServer server(80);

// HTML web page with LED control buttons
const char htmlPage[] PROGMEM = R"rawliteral(
<!DOCTYPE html>
<html>
<head>
  <title>ESP32 LED Control</title>
  <style>
    body { font-family: Arial; text-align: center; background: #f4f4f4; padding-top: 50px; }
    .box { margin: auto; width: 300px; padding: 20px; background: white; border-radius: 10px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }
    button { padding: 15px 30px; font-size: 18px; margin: 10px; cursor: pointer; }
    .on { background-color: green; color: white; }
    .off { background-color: red; color: white; }
  </style>
</head>
<body>
  <div class="box">
    <h2>ESP32 LED Control</h2>
    <button class="on" onclick="location.href='/led/on'">Turn ON</button>
    <button class="off" onclick="location.href='/led/off'">Turn OFF</button>
  </div>
</body>
</html>
)rawliteral";

// Handlers for routes
void handleRoot() {
  server.send(200, "text/html", htmlPage);
}

void handleLedOn() {
  digitalWrite(ledPin, HIGH);
  Serial.println("LED turned ON");
  server.send(200, "text/html", "<h1>LED is ON</h1><a href='/'>Go Back</a>");
}

void handleLedOff() {
  digitalWrite(ledPin, LOW);
  Serial.println("LED turned OFF");
  server.send(200, "text/html", "<h1>LED is OFF</h1><a href='/'>Go Back</a>");
}

void setup() {
  Serial.begin(115200);

  // Set LED pin as output
  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, LOW); // Start with LED off

  // Start Access Point
  WiFi.softAP(ssid, password);
  Serial.println("Access Point Started");
  Serial.print("IP Address: ");
  Serial.println(WiFi.softAPIP());

  // Route definitions
  server.on("/", handleRoot);
  server.on("/led/on", handleLedOn);
  server.on("/led/off", handleLedOff);

  server.begin();
  Serial.println("HTTP server started");
}

void loop() {
  server.handleClient();
}
